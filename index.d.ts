/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Animation {
  get extents(): any
  get name(): any
  get compression_type(): any
  get interpolation_time(): any
  get keyframe_count(): any
  get keyframes(): any
  get transform_count(): any
  get transforms(): any
}

export declare class AnimBinding {
  get name(): any
  get extents(): any
  get origin(): any
}

export declare class BlindData {
  get data_len(): any
}

export declare class BoneNode {
  get name(): any
  get index(): any
  get flags(): any
  get bind_matrix(): any
  get child_count(): any
  get children(): any
}

export declare class BoneSet {
  get index_start(): any
  get index_count(): any
  get bone_list(): any
  get index_buffer_index(): any
}

export declare class ColorArgb {
  get a(): any
  get r(): any
  get g(): any
  get b(): any
}

export declare class ColorBgra {
  get b(): any
  get g(): any
  get r(): any
  get a(): any
}

export declare class ColorRgb {
  get r(): any
  get g(): any
  get b(): any
}

export declare class ColorRgba {
  get r(): any
  get g(): any
  get b(): any
  get a(): any
}

export declare class Colour32bit {
  get data(): any
}

export declare class Colour8bit {
  get data(): any
}

export declare class Compressed {
  get row_count(): any
  get texture_rows(): any
}

export declare class CompressedTextureRow {
  get mipmaps(): any
  get dtx_section(): any
}

export declare class DataItem {
  get item_size(): any
  get item_type(): any
  get item_property_count(): any
  get item_properties(): any
}

export declare class DatHeader {
  get dat_version(): any
  get world_data_pos(): any
  get blind_data_pos(): any
  get light_data_pos(): any
  get physics_data_pos(): any
  get particle_data_pos(): any
  get render_data_pos(): any
  get future(): any
}

export declare class DatVertex {

}

export declare class DtxHeader {
  get resource_type(): any
  get version(): any
  get nice_version(): any
  get width(): any
  get height(): any
  get mipmap_count(): any
  get section_count(): any
  get flags(): any
  get user_flags(): any
  get texture_group(): any
  get mipmaps_to_use(): any
  get bpp_identifier(): any
  get mipmap_offset(): any
  get mipmap_texcoord_offset(): any
  get texture_priority(): any
  get detail_texture_scale(): any
  get detail_texture_angle(): any
  get command_data(): any
  get command_string(): any
}

export declare class DtxSection {
  get section_type_data(): any
  get section_name_data(): any
  get section_type(): any
  get section_name(): any
  get data_count(): any
  get data(): any
}

export declare class ImageMeta {
  get type(): string
  get Palette8Bit(): any
  get Compressed(): any
  get Texture32Bit(): any
  get Palette32Bit(): any
}

export declare class ItemProperty {
  get name(): any
  get data_type(): any
  get flags(): any
  get data_length(): any
  get data(): any
}

export declare class ItemPropertyData {
  get type(): string
  get String(): any
  get Vector3(): any
  get Color(): any
  get Float32(): any
  get Uint32(): any
  get Uint8(): any
  get Int32(): any
  get Quaternion(): any
}

export declare class Keyframe {
  get time(): any
  get string(): any
}

export declare class LightData {
  get lookup_start(): any
  get block_size(): any
  get lookup_size(): any
  get light_data_grid_count(): any
  get light_data_grid(): any
}

export declare class LightGroup {
  get name(): any
  get color(): any
  get intensity_data_len(): any
  get intensity_data(): any
  get section_row_count(): any
  get section_rows(): any
}

export declare class LightMapSection {
  get left(): any
  get top(): any
  get width(): any
  get height(): any
  get data_len(): any
  get data(): any
}

export declare class LightMapSectionRow {
  get section_count(): any
  get sections(): any
}

export declare class LithtechDat {
  get header(): any
  get world(): any
  get world_tree(): any
  get world_data(): any
  get blind_data(): any
  get light_data(): any
  get physics_data(): any
  get particle_data(): any
  get render_data(): any
}

export declare class LithtechDtx {
  get header(): any
  get dtx_fullbrite(): any
  get dtx_prefer16bit(): any
  get dtx_mipsalloced(): any
  get dtx_sectionsfixed(): any
  get dtx_nosyscache(): any
  get dtx_prefer4444(): any
  get dtx_prefer5551(): any
  get dtx_32bitsyscopy(): any
  get dtx_cubemap(): any
  get dtx_bumpmap(): any
  get dtx_lumbumpmap(): any
  get is_bpp_8p(): any
  get is_bpp_8(): any
  get is_bpp_16(): any
  get is_bpp_32(): any
  get is_bpp_s3tc_dxt1(): any
  get is_bpp_s3tc_dxt3(): any
  get is_bpp_s3tc_dxt5(): any
  get is_bpp_32p(): any
  get is_bpp_24(): any
  get is_palette_8bit(): any
  get is_compressed(): any
  get is_texture_32bit(): any
  get is_palette_32bit(): any
  get meta(): any
  get surplus(): any
}

export declare class LithtechLtb {
  get header(): any
  get model_obb_count(): any
  get model_obb_list(): any
  get piece_count(): any
  get pieces(): any
  get bone_tree(): any
  get weight_set_count(): any
  get weight_sets(): any
  get child_model_count(): any
  get child_models(): any
  get animation_count(): any
  get animations(): any
  get socket_count(): any
  get sockets(): any
  get anim_binding_count(): any
  get anim_bindings(): any
}

export declare class LodContainer {
  get texture_count(): any
  get textures(): any
  get render_style(): any
  get render_priority(): any
  get mesh_type(): any
  get mesh(): any
  get used_node_count(): any
  get used_nodes(): any
}

export declare class LodMesh {
  get type(): string
  get RigidMesh(): any
  get SkeletalMesh(): any
  get VertexAnimatedMesh(): any
  get NullMesh(): any
  get UnknownMesh(): any
}

export declare class LodMeshInfo {
  get obj_size(): any
  get vertex_count(): any
  get face_count(): any
  get face_max_bone(): any
  get vert_max_bone(): any
}

export declare class LtbHeader {
  get file_type(): any
  get file_version(): any
  get space_unknown(): any
  get obb_version(): any
  get keyframe_count(): any
  get animation_count(): any
  get node_count(): any
  get pieces_no_use_count(): any
  get child_model_count(): any
  get face_count(): any
  get vertex_count(): any
  get vertex_weight_count(): any
  get lod_count(): any
  get socket_count(): any
  get weight_set_count(): any
  get string_count(): any
  get string_length(): any
  get vertex_animation_data_size(): any
  get animation_data_size(): any
  get command_string(): any
  get internal_radius(): any
}

export declare class LtbVertex {
  get position(): any
  get weight_blend(): any
  get normal(): any
  get color(): any
  get uv1(): any
  get uv2(): any
  get uv3(): any
  get uv4(): any
  get s(): any
  get t(): any
}

export declare class Matrix {

}

export declare class Mipmap {
  get width(): any
  get height(): any
  get data(): any
}

export declare class ModelOBB {
  get pos(): any
  get size(): any
  get basis(): any
  get i_node(): any
  get radius(): any
}

export declare class NormalTransform {
  get compression_type(): any
  get is_vertex_animation(): any
  get position_count(): any
  get positions(): any
  get rotation_count(): any
  get rotations(): any
}

export declare class NullMesh {
  get offset(): any
}

export declare class Palette32Bit {
  get data(): any
  get mipmaps(): any
  get section_type(): any
  get section_unk(): any
  get section_filler(): any
  get section_length(): any
  get palette(): any
  get colour_data(): any
}

export declare class Palette8Bit {
  get mipmaps(): any
}

export declare class Piece {
  get name(): any
  get lod_count(): any
  get lod_distances(): any
  get lod_min(): any
  get lod_max(): any
  get lod_containers(): any
}

export declare class Plane {
  get normal(): any
  get dist(): any
}

export declare class Polygon {
  get plane(): any
  get vertex_count(): any
  get vertexes(): any
}

export declare class PolygonData {
  get polygon_count(): any
  get polygons(): any
}

export declare class QuaternionF32 {
  get x(): any
  get y(): any
  get z(): any
  get w(): any
}

export declare class RenderBlock {
  get center(): any
  get half_dims(): any
  get section_count(): any
  get sections(): any
  get vertex_count(): any
  get vertexes(): any
  get triangle_count(): any
  get triangles(): any
  get sky_portal_count(): any
  get sky_portals(): any
  get shader_count(): any
  get shaders(): any
  get light_group_count(): any
  get light_groups(): any
  get child_flags(): any
  get child_node_indices(): any
}

export declare class RenderData {
  get render_block_count(): any
  get render_blocks(): any
  get world_model_render_block_count(): any
  get world_model_render_blocks(): any
}

export declare class RenderSection {
  get textures(): any
  get shader_code(): any
  get num_triangles(): any
  get texture_effect(): any
  get light_map_width(): any
  get light_map_height(): any
  get light_map_len(): any
  get light_map(): any
}

export declare class RigidMesh {
  get info(): any
  get vertex_type_map(): any
  get bone(): any
  get vertex_groups(): any
  get vertex_index(): any
}

export declare class ShaderPoly {
  get vertex_count(): any
  get vertexes(): any
  get plane(): any
  get name(): any
}

export declare class SkeletalMesh {
  get info(): any
  get re_indexed_bone(): any
  get vertex_type_map(): any
  get matrix_palette(): any
  get vertex_groups(): any
  get vertex_index(): any
  get bone_set_count(): any
  get bone_set(): any
}

export declare class SkyPortal {
  get vertex_count(): any
  get vertexes(): any
  get plane(): any
}

export declare class Socket {
  get node_index(): any
  get name(): any
  get rotation(): any
  get position(): any
  get scale(): any
}

export declare class Surface {
  get flags(): any
  get texture_index(): any
  get texture_flags(): any
}

export declare class Texture32Bit {
  get row_count(): any
  get texture_rows(): any
}

export declare class Texture32BitTextureRow {
  get mipmaps(): any
  get dtx_section(): any
}

export declare class Triangle {
  get vertex_indexes(): any
  get poly_index(): any
}

export declare class UnknownMesh {
  get info(): any
}

export declare class Vector2F32 {
  get x(): any
  get y(): any
}

export declare class Vector3F32 {
  get x(): any
  get y(): any
  get z(): any
}

export declare class VertexAnimatedMesh {
  get info(): any
}

export declare class VertexGroup {
  get vertexes(): any
}

export declare class WeightSet {
  get name(): any
  get weight_count(): any
  get weights(): any
}

export declare class World {
  get properties(): any
  get extents_min(): any
  get extents_max(): any
  get world_offset(): any
}

export declare class WorldData {
  get data_item_count(): any
  get data_items(): any
}

export declare class WorldModel {
  get reserved(): any
  get world_info_flag(): any
  get world_name(): any
  get num_points(): any
  get num_planes(): any
  get num_surfaces(): any
  get reserved1(): any
  get num_polygons(): any
  get reserved2(): any
  get num_polygon_vertex_indexes(): any
  get reserved3(): any
  get reserved4(): any
  get num_nodes(): any
  get box_min(): any
  get box_max(): any
  get world_translation(): any
  get texture_name_size(): any
  get num_texture_names(): any
  get texture_names(): any
  get vertex_count_list(): any
  get planes(): any
  get surfaces(): any
  get polygons(): any
  get nodes(): any
  get points(): any
  get root_node_index(): any
  get sections(): any
}

export declare class WorldModelNode {
  get poly_index(): any
  get reserved(): any
  get node_sides_indices(): any
}

export declare class WorldModelPolygon {
  get surface_index(): any
  get plane_index(): any
  get vertex_indexes(): any
}

export declare class WorldModelRenderBlock {
  get name(): any
  get render_block_count(): any
  get render_blocks(): any
  get no_child_flag(): any
}

export declare class WorldTree {
  get box_min(): any
  get box_max(): any
  get child_num_nodes(): any
  get dummy_terrain_depth(): any
  get world_layout(): any
  get world_model_count(): any
  get world_models(): any
}

export declare function parseDat(buf: Uint8Array): any

export declare function parseDtx(buf: Uint8Array): any

export declare function parseLtb(buf: Uint8Array): any

export declare function plus100(input: number): number

export declare function plus100FromZig(input: number): number
