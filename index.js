// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./lithtech-parser.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./lithtech-parser.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./lithtech-parser.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./lithtech-parser.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./lithtech-parser.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./lithtech-parser.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@ylcc/lithtech-parser-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./lithtech-parser.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./lithtech-parser.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./lithtech-parser.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./lithtech-parser.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./lithtech-parser.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./lithtech-parser.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./lithtech-parser.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./lithtech-parser.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./lithtech-parser.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./lithtech-parser.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./lithtech-parser.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./lithtech-parser.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@ylcc/lithtech-parser-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./lithtech-parser.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./lithtech-parser.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./lithtech-parser.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./lithtech-parser.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./lithtech-parser.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@ylcc/lithtech-parser-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./lithtech-parser.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@ylcc/lithtech-parser-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

module.exports = nativeBinding
module.exports.Animation = nativeBinding.Animation
module.exports.AnimBinding = nativeBinding.AnimBinding
module.exports.BlindData = nativeBinding.BlindData
module.exports.BoneNode = nativeBinding.BoneNode
module.exports.BoneSet = nativeBinding.BoneSet
module.exports.ColorArgb = nativeBinding.ColorArgb
module.exports.ColorBgra = nativeBinding.ColorBgra
module.exports.ColorRgb = nativeBinding.ColorRgb
module.exports.ColorRgba = nativeBinding.ColorRgba
module.exports.Colour32bit = nativeBinding.Colour32bit
module.exports.Colour8bit = nativeBinding.Colour8bit
module.exports.Compressed = nativeBinding.Compressed
module.exports.CompressedTextureRow = nativeBinding.CompressedTextureRow
module.exports.DataItem = nativeBinding.DataItem
module.exports.DatHeader = nativeBinding.DatHeader
module.exports.DatVertex = nativeBinding.DatVertex
module.exports.DtxHeader = nativeBinding.DtxHeader
module.exports.DtxSection = nativeBinding.DtxSection
module.exports.ImageMeta = nativeBinding.ImageMeta
module.exports.ItemProperty = nativeBinding.ItemProperty
module.exports.ItemPropertyData = nativeBinding.ItemPropertyData
module.exports.Keyframe = nativeBinding.Keyframe
module.exports.LightData = nativeBinding.LightData
module.exports.LightGroup = nativeBinding.LightGroup
module.exports.LightMapSection = nativeBinding.LightMapSection
module.exports.LightMapSectionRow = nativeBinding.LightMapSectionRow
module.exports.LithtechDat = nativeBinding.LithtechDat
module.exports.LithtechDtx = nativeBinding.LithtechDtx
module.exports.LithtechLtb = nativeBinding.LithtechLtb
module.exports.LodContainer = nativeBinding.LodContainer
module.exports.LodMesh = nativeBinding.LodMesh
module.exports.LodMeshInfo = nativeBinding.LodMeshInfo
module.exports.LtbHeader = nativeBinding.LtbHeader
module.exports.LtbVertex = nativeBinding.LtbVertex
module.exports.Matrix = nativeBinding.Matrix
module.exports.Mipmap = nativeBinding.Mipmap
module.exports.ModelOBB = nativeBinding.ModelOBB
module.exports.NormalTransform = nativeBinding.NormalTransform
module.exports.NullMesh = nativeBinding.NullMesh
module.exports.Palette32Bit = nativeBinding.Palette32Bit
module.exports.Palette8Bit = nativeBinding.Palette8Bit
module.exports.Piece = nativeBinding.Piece
module.exports.Plane = nativeBinding.Plane
module.exports.Polygon = nativeBinding.Polygon
module.exports.PolygonData = nativeBinding.PolygonData
module.exports.QuaternionF32 = nativeBinding.QuaternionF32
module.exports.RenderBlock = nativeBinding.RenderBlock
module.exports.RenderData = nativeBinding.RenderData
module.exports.RenderSection = nativeBinding.RenderSection
module.exports.RigidMesh = nativeBinding.RigidMesh
module.exports.ShaderPoly = nativeBinding.ShaderPoly
module.exports.SkeletalMesh = nativeBinding.SkeletalMesh
module.exports.SkyPortal = nativeBinding.SkyPortal
module.exports.Socket = nativeBinding.Socket
module.exports.Surface = nativeBinding.Surface
module.exports.Texture32Bit = nativeBinding.Texture32Bit
module.exports.Texture32BitTextureRow = nativeBinding.Texture32BitTextureRow
module.exports.Triangle = nativeBinding.Triangle
module.exports.UnknownMesh = nativeBinding.UnknownMesh
module.exports.Vector2F32 = nativeBinding.Vector2F32
module.exports.Vector3F32 = nativeBinding.Vector3F32
module.exports.VertexAnimatedMesh = nativeBinding.VertexAnimatedMesh
module.exports.VertexGroup = nativeBinding.VertexGroup
module.exports.WeightSet = nativeBinding.WeightSet
module.exports.World = nativeBinding.World
module.exports.WorldData = nativeBinding.WorldData
module.exports.WorldModel = nativeBinding.WorldModel
module.exports.WorldModelNode = nativeBinding.WorldModelNode
module.exports.WorldModelPolygon = nativeBinding.WorldModelPolygon
module.exports.WorldModelRenderBlock = nativeBinding.WorldModelRenderBlock
module.exports.WorldTree = nativeBinding.WorldTree
module.exports.parseDat = nativeBinding.parseDat
module.exports.parseDtx = nativeBinding.parseDtx
module.exports.parseLtb = nativeBinding.parseLtb
module.exports.plus100 = nativeBinding.plus100
module.exports.plus100FromZig = nativeBinding.plus100FromZig
